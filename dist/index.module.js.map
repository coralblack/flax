{"mappings":"iKAKO,SAASA,SAASC,GACvB,OAAOC,EAAAC,cAAAD,EAAAE,SAAA,KAAA,YCFT,MAAMC,EAAQ,IAAIC,EAAI,CAACC,IAAK,IAAKC,OAAQ,MAqBnCC,EAEF,GACEC,EAAW,CACfA,EACAC,EACAC,EACAC,KAEA,IAAKF,EAMH,YALIE,EACFH,EAASI,OAAOD,GAEhBH,EAASK,QAAQ,CAACC,KAAMJ,MAAAA,OAAF,EAAEA,EAAMI,KAAMC,SAAUL,KAKtCH,EAAUE,GAAKO,OAAO,EAAGT,EAAUE,GAAKQ,QAEhDC,SAAQ,EAAEL,QAAAA,EAASD,OAAAA,MACjBD,EACFC,EAAOD,GAEPE,EAAQ,CAACC,KAAMJ,MAAAA,OAAF,EAAEA,EAAMI,KAAMC,SAAUL,+rBCrC3C,SAASS,EACPC,EACAT,GAEA,MAAO,KAAA,CACLU,OAAQV,EAAQ,QAAU,UAC1BW,QAAQF,MAAAA,OAAA,EAAAA,EAAKN,OAAQ,KACrBH,MAAOA,IAqCX,SAASY,EAAgBC,GACvB,MAAOC,EAAUC,GAAeC,KAC1BC,IAACA,EAADC,UAAMA,EAANC,SAAiBA,GAAYN,EAC7BO,EAAM,IDHP,SAAoBP,GACzB,OAAO,IAAIQ,SAAmB,CAACnB,EAASD,KACtCqB,YAAW,KACT,MAAMC,EAAM,EAAEC,EAAGC,KACf,MAAMC,EAAKC,EAAYC,UAAUH,GACjC,OAAOD,GAAKE,GAAMF,EAAEK,SAAS,KAAO,IAAM,KAAOH,EAAK,KAF5C,CAGTb,EAAMU,IAAKV,EAAMY,OAAS,IAEvBK,EACa,QAAjBjB,EAAMkB,QAAoBlB,EAAMmB,aAAenB,EAAMmB,YAAc,EAC/D,GACA,KACAC,EAASH,GAAYtC,EAAM0C,IAAIJ,GAC/BK,EACa,QAAjBtB,EAAMkB,QAAoBlB,EAAMuB,SAAhC,GAAAC,OACOxB,EAAMkB,OADb,KAAAM,OACuBd,GACnB,KAEFY,IACFvC,EAAUuC,GAAavC,EAAUuC,IAAc,GAC/CvC,EAAUuC,GAAWG,KAAK,CAACpC,QAAAA,EAASD,OAAAA,IAGhCL,EAAUuC,GAAW7B,OAAS,KAKhC2B,EACF/B,EAAQ+B,GAIVX,YAAW,KACTiB,EACGC,QAAW,CACVT,OAAQlB,EAAMkB,OACdR,IAAAA,IAEDkB,MAAK1C,IACJF,EAAS,CAACK,QAAAA,EAASD,OAAAA,GAASkC,EAAWpC,EAAM,SAE9C2C,OAAMC,IACL9C,EAAS,CAACK,QAAAA,EAASD,OAAAA,GAASkC,EAAW,KAAMQ,QAEhD,OACF9B,EAAM+B,OAAS,MC1CXC,CACLC,OAAOC,OACL,CACEX,UAA2B,IAAjBnB,EAAImB,SACdlB,UAAAA,GAEFL,EAAMI,MAuBZ,GAlBA+B,GAAU,KACJ7B,EAAW,GACbC,IACGqB,MAAKhC,IACJM,GAAY,IAAMP,EAAgBC,EAAK,QACvCI,EAAMoC,aAAY,MAEnBP,OAAMC,IACL5B,GAAY,IAAMP,EAAgB,KAAMmC,KACxC9B,EAAMoC,aAAY,QAGvB,CAAC9B,IAEJ6B,GAAU,KACRjC,GAAY,IA/DH,SACXmC,EACAC,GAEA,IACInD,EACAW,EAFAD,EAAqB,UAYzB,OARAyC,EAAEV,MAAKhC,MACHE,OAAAA,EAAQD,OAAAA,EAAQV,MAAAA,GAASQ,EAAgBC,EAAK,KAArBD,IAC3B0C,GAAQ,MACPR,OAAMC,MACLhC,OAAAA,EAAQD,OAAAA,EAAQV,MAAAA,GAASQ,EAAgB,KAAMmC,EAAtBnC,IAC3B0C,GAAQ,MAGH,KACL,GAAe,YAAXxC,EAAsB,MAAMyC,EAEhC,MAAO,CACLzC,OAAAA,EACAV,MAAAA,EACAW,OAAAA,IAyCgByC,CAAQvC,EAAMoC,YAAa7B,SAC5C,CAACH,EAAIc,OAAQd,EAAIM,IAAKL,KAEpBJ,EAAU,OAAOzB,EAAAC,cAAAD,EAAAE,SAAA,MAEtB,MAAMQ,EAAOe,IAEb,MAAoB,UAAhBf,EAAKW,OAELrB,EAAAC,cAAAD,EAAAE,SAAA,KACEF,EAAAC,cAAA,MAAA,KAAA,UAAaS,EAAKC,MAAMqD,QAAxB,MAKChE,EAAAC,cAAAD,EAAAE,SAAA,KAAGsB,EAAMyC,OAAOvD,EAAKY,gBAkBvB,MAAM4C,gBAAyBC,EAIpCC,YAAY5C,GACV6C,MAAM7C,GAEN8C,KAAKC,MAAQ,CACX1C,UAAW,EACXC,SAAU,EACV0C,MAAM,GAIVC,OAAOC,GACDJ,KAAKC,MAAMC,OAEXE,EACFJ,KAAKK,SAALC,EAAAA,EAAA,GACKN,KAAKC,OADV,GAAA,CAEEzC,SAAUwC,KAAKC,MAAMzC,SAAW,EAChC0C,MAAM,KAKVF,KAAKK,SAALC,EAAAA,EAAA,GACKN,KAAKC,OADV,GAAA,CAEE1C,UAAWyC,KAAKC,MAAM1C,UAAY,EAClC2C,MAAM,MAIVZ,YAAYiB,GACNP,KAAK9C,MAAMsD,MACbR,KAAK9C,MAAMsD,KAAKD,GAGlBP,KAAKK,SAALC,EAAAA,EAAA,GACKN,KAAKC,OADV,GAAA,CAEEC,MAAM,KAIVP,SACE,OACEjE,EAAAC,cAAA,MAAA,CAAK8E,UAAU,YACb/E,EAAAC,cAAC+E,EAAD,CAAUC,SAAUjF,EAAAC,cAAA,MAAA,CAAK8E,UAAU,mBAAf,eAClB/E,EAAAC,cAACiF,EAAD,CACEtB,YAAaiB,GAAWP,KAAKV,YAAYiB,GACzChD,UAAWyC,KAAKC,MAAM1C,UACtBC,SAAUwC,KAAKC,MAAMzC,SACrBF,IAAK0C,KAAK9C,MAAMI,IAChBqC,OAAQK,KAAK9C,MAAMyC","sources":["./src/components/FxButton.tsx","./src/request.ts","./src/components/FxGuard.tsx"],"sourcesContent":["import React from 'react';\n\ninterface FxButtonProps {}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function FxButton(_props: FxButtonProps) {\n  return <>FxButton</>;\n}\n","import axios, {AxiosResponse} from 'axios';\nimport LRU from 'lru-cache';\nimport queryString from 'query-string';\n\nconst cache = new LRU({max: 100, maxAge: 1000 * 60 * 10});\n\ntype QueryType = string | number | boolean;\ntype Query = {[key: string]: QueryType | QueryType[]};\nexport interface FxApiRequest {\n  method: 'GET' | 'POST' | 'DELETE' | 'PATCH' | 'PUT';\n  url: string;\n  cacheMaxAge?: number;\n  throttle?: boolean;\n  delay?: number;\n  query?: Query;\n}\n\ninterface RequestProps extends FxApiRequest {\n  refreshId: number;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Resolver = (data: any) => void;\ntype Rejector = (reason: Error) => void;\n\nconst resolvers: {\n  [key: string]: Array<{resolve: Resolver; reject: Rejector}>;\n} = {};\nconst resolver = (\n  resolver: {resolve: Resolver; reject: Rejector},\n  key: string | null,\n  resp: AxiosResponse | null,\n  error: Error | null\n) => {\n  if (!key) {\n    if (error) {\n      resolver.reject(error);\n    } else {\n      resolver.resolve({data: resp?.data, response: resp});\n    }\n    return;\n  }\n\n  const res = resolvers[key].splice(0, resolvers[key].length);\n\n  res.forEach(({resolve, reject}) => {\n    if (error) {\n      reject(error);\n    } else {\n      resolve({data: resp?.data, response: resp});\n    }\n  });\n};\n\nexport type FxResp<T> = {data: T; response: AxiosResponse};\n\nexport function request<T>(props: RequestProps): Promise<FxResp<T>> {\n  return new Promise<FxResp<T>>((resolve, reject) => {\n    setTimeout(() => {\n      const url = ((u, query) => {\n        const qs = queryString.stringify(query);\n        return u + (qs ? (u.includes('?') ? '&' : '?') + qs : '');\n      })(props.url, props.query || {});\n\n      const cacheKey =\n        props.method === 'GET' && props.cacheMaxAge && props.cacheMaxAge > 0\n          ? ''\n          : null;\n      const cached = cacheKey && cache.get(cacheKey);\n      const lazyGroup =\n        props.method === 'GET' && props.throttle\n          ? `${props.method} ${url}`\n          : null;\n\n      if (lazyGroup) {\n        resolvers[lazyGroup] = resolvers[lazyGroup] || [];\n        resolvers[lazyGroup].push({resolve, reject});\n\n        // Duplicated `GET` request,\n        if (resolvers[lazyGroup].length > 1) {\n          return;\n        }\n      }\n\n      if (cached) {\n        resolve(cached);\n        return;\n      }\n\n      setTimeout(() => {\n        axios\n          .request<T>({\n            method: props.method,\n            url,\n          })\n          .then(resp => {\n            resolver({resolve, reject}, lazyGroup, resp, null);\n          })\n          .catch(err => {\n            resolver({resolve, reject}, lazyGroup, null, err);\n          });\n      }, 25);\n    }, props.delay || 0);\n  });\n}\n","import React, {Component, Suspense, useEffect, useState} from 'react';\nimport {request, FxApiRequest, FxResp} from '../request';\n\ntype Renderer<T> = (data: T) => React.ReactNode;\n\ntype LazyStatus = 'PENDING' | 'SUCCESS' | 'ERROR';\ninterface Lazy<T> {\n  status: LazyStatus;\n  error: Error | null;\n  result: T | null;\n}\n\nfunction lazyResponse<T>(\n  res: FxResp<T> | null,\n  error: Error | null\n): () => {status: LazyStatus; result: T | null; error: Error | null} {\n  return () => ({\n    status: error ? 'ERROR' : 'SUCCESS',\n    result: res?.data || null,\n    error: error,\n  });\n}\n\nconst lazy = function <T>(\n  release: ReleaseDelegateInternal,\n  p: Promise<FxResp<T>>\n) {\n  let status: LazyStatus = 'PENDING';\n  let error: Error | null;\n  let result: T | null;\n\n  p.then(res => {\n    ({result, status, error} = lazyResponse<T>(res, null)());\n    release(true);\n  }).catch(err => {\n    ({result, status, error} = lazyResponse<T>(null, err)());\n    release(false);\n  });\n\n  return (): Lazy<T> => {\n    if (status === 'PENDING') throw p;\n\n    return {\n      status,\n      error,\n      result,\n    };\n  };\n};\n\ninterface FxGuardInnerProps<T> extends FxGuardProps<T> {\n  releaseBusy: ReleaseDelegateInternal;\n  refreshId: number;\n  reloadId: number;\n}\n\nfunction FxGuardInner<T>(props: FxGuardInnerProps<T>) {\n  const [prepared, setPrepared] = useState<Function>();\n  const {api, refreshId, reloadId} = props;\n  const req = () => {\n    return request<T>(\n      Object.assign(\n        {\n          throttle: api.throttle === false ? false : true,\n          refreshId,\n        },\n        props.api\n      )\n    );\n  };\n\n  useEffect(() => {\n    if (reloadId > 0) {\n      req()\n        .then(res => {\n          setPrepared(() => lazyResponse<T>(res, null));\n          props.releaseBusy(true);\n        })\n        .catch(err => {\n          setPrepared(() => lazyResponse<T>(null, err));\n          props.releaseBusy(false);\n        });\n    }\n  }, [reloadId]);\n\n  useEffect(() => {\n    setPrepared(() => lazy<T>(props.releaseBusy, req()));\n  }, [api.method, api.url, refreshId]);\n\n  if (!prepared) return <></>;\n\n  const resp = prepared();\n\n  if (resp.status === 'ERROR') {\n    return (\n      <>\n        <div>Error ({resp.error.message})</div>\n      </>\n    );\n  }\n\n  return <>{props.render(resp.result)}</>;\n}\n\ninterface FxGuardProps<T> {\n  api: FxApiRequest;\n  render: Renderer<T>;\n  done?: ReleaseDelegate;\n}\n\ntype ReleaseDelegate = (succeed?: boolean) => void;\ntype ReleaseDelegateInternal = (succeed: boolean) => void;\ninterface FxGuardStates {\n  refreshId: number;\n  reloadId: number;\n  busy: boolean;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport class FxGuard<T = any> extends Component<\n  FxGuardProps<T>,\n  FxGuardStates\n> {\n  constructor(props: FxGuardProps<T>) {\n    super(props);\n\n    this.state = {\n      refreshId: 0,\n      reloadId: 0,\n      busy: false,\n    };\n  }\n\n  reload(silent?: boolean) {\n    if (this.state.busy) return;\n\n    if (silent) {\n      this.setState({\n        ...this.state,\n        reloadId: this.state.reloadId + 1,\n        busy: true,\n      });\n      return;\n    }\n\n    this.setState({\n      ...this.state,\n      refreshId: this.state.refreshId + 1,\n      busy: true,\n    });\n  }\n\n  releaseBusy(succeed: boolean) {\n    if (this.props.done) {\n      this.props.done(succeed);\n    }\n\n    this.setState({\n      ...this.state,\n      busy: false,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"fx-guard\">\n        <Suspense fallback={<div className=\"fx-guard-loader\">Loading ..</div>}>\n          <FxGuardInner<T>\n            releaseBusy={succeed => this.releaseBusy(succeed)}\n            refreshId={this.state.refreshId}\n            reloadId={this.state.reloadId}\n            api={this.props.api}\n            render={this.props.render}\n          />\n        </Suspense>\n      </div>\n    );\n  }\n}\n"],"names":["FxButton","_props","_react","createElement","Fragment","cache","LRU","max","maxAge","resolvers","resolver","key","resp","error","reject","resolve","data","response","splice","length","forEach","lazyResponse","res","status","result","FxGuardInner","props","prepared","setPrepared","useState","api","refreshId","reloadId","req","Promise","setTimeout","url","u","query","qs","queryString","stringify","includes","cacheKey","method","cacheMaxAge","cached","get","lazyGroup","throttle","concat","push","axios","request","then","catch","err","delay","$e37d50e173cfeed719d55c3076a8beab$export$request","Object","assign","useEffect","releaseBusy","release","p","lazy","message","render","FxGuard","Component","constructor","super","this","state","busy","reload","silent","setState","$b3391a37da12f524ec061e62849b526d$var$_objectSpread","succeed","done","className","Suspense","fallback","$b3391a37da12f524ec061e62849b526d$var$FxGuardInner"],"version":3,"file":"index.module.js.map"}